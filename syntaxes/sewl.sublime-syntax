%YAML1.2
---
name: SEWL
file_extensions: [sewl]
scope: source.sewl

variables:
  name: '[A-Za-z][A-Za-z0-9]*'
  parameter: '[a-z]+(-[a-z]+)*'
  value_decimal: \d+\.\d+\b
  value_integer: \d+\b
  unary_operator_arithmetic: '-'
  unary_operator_word: '\b(floor|ceil|round|count)\b'
  binary_operator_arithmetic: '(\+|-|\*|/|%)'
  binary_operator_logical: '(\?|:|&&|\|\||==|!=|<>|<=|>=|!|<|>)'
  binary_operator_word: '\bcontains\b'
  binary_operator_other: '\.'

contexts:

  # clear the context at the end of the line
  prototype:
    - match: '$'
      pop: true

  # start of a line
  main:

    # blank lines
    - match: '^\s*$'

    # comments
    - match: '^\s*//.*$'
      scope: comment.line.double_slash.sewl

    # breakpoint definition
    - match: '^breakpoints\b'
      scope: keyword.other.sewl
      set: breakpoint

    # short fragment syntax without parameters
    - match: '^({{name}}):'
      captures:
        1: meta.function.sewl entity.name.function.sewl
      set: error

    # short fragment syntax with parameters
    - match: '^({{name}})\('
      captures:
        1: meta.function.sewl entity.name.function.sewl
      set: fragment_parameter

    # layouts and long fragment syntax
    - match: '^(layout|fragment)\b'
      scope: keyword.other.sewl
      set: parameter_name

    # set expression
    - match: 'set\b'
      scope: keyword.control.sewl
      set: [error, value_or_literal, name]

    # unrecognised keyword
    - match: '^\S+\b'
      scope: invalid.illegal.sewl
      set: ignore

    # valid indentation
    - match: '^(  )+(?! )'
      set: indented

    # invalid indentation
    - match: '^(  )* (?! )'
      scope: invalid.illegal.sewl
      set: ignore

  # ignores the rest of a line following an error
  ignore:
    - match: '.*$'
      pop: true

  # highlights the rest of a line as an error
  error:
    - match: '.*$'
      scope: invalid.illegal.sewl
      pop: true

  # expecting a fragment parameter
  fragment_parameter:

    # parameter
    - match: '{{name}}'
      scope: variable.parameter.sewl
      set: fragment_after_parameter

    # invalid text
    - match: '(?=.)'
      set: error

  # after a fragment parameter
  fragment_after_parameter:

    # end of definition
    - match: '\):'
      set: error

    # parameter separator
    - match: ','
      score: punctuation.separator.sewl
      set: fragment_parameter

    # invalid text
    - match: '(?=.)'
      set: error

  # after valid indentation
  indented:

    # continuations
    - match: '- '
      set: parameter_name

    # short include syntax
    - match: '\+'
      scope: keyword.control.sewl
      set: parameter_value

    # long include syntax
    - match: 'include\b'
      scope: keyword.control.sewl
      set: parameter_name

    # breakpoint expression
    - match: '(=|<=|>=|<|>|!)'
      scope: keyword.control.sewl
      set: parameter_value

    # component name
    - match: '(anchor|background|basket|blog|blogfeed|blogmenu|blogpost|breakpoint|button|category|choice|colourblock|column|columns|comments|confirmation|cookies|copyright|debug|divider|dropdown|edit|facebooklikebox|feed|field|fieldgrid|file|flex|flexitem|form|gallery|grid|griditem|heading|iframe|image|map|mode|multimedia|navigation|option|optional|options|pay|privacypolicy|product|request|row|search|searchresults|section|sectionoptions|share|shared|shop|showhide|split|splitoptions|sticky|superoptions|table|text|textonimage|translate|tree|trustpilot|twitter|upload|yoshki)\b'
      scope: keyword.other.sewl
      set: parameter_name

    # if or elseif
    - match: '(if|elseif)\b'
      scope: keyword.control.sewl
      set: [error, value]

    # else
    - match: 'else\b'
      scope: keyword.control.sewl
      set: error

    # for
    - match: 'for\b'
      scope: keyword.control.sewl
      set: [error, value, value, name]

    # foreach
    - match: 'foreach\b'
      scope: keyword.control.sewl
      set: [error, value, name]

    #set
    - match: 'set\b'
      scope: keyword.control.sewl
      set: [error, value_or_literal, name]

    # style
    - match: 'style\b'
      scope: keyword.other.sewl
      set: value

    # unrecognised keyword
    - match: '\S+\b'
      scope: invalid.illegal.sewl
      set: ignore

  # a breakpoint name or width
  breakpoint:

    # name
    - match: '{{name}}\b'
      scope: string.unquoted.sewl
      set: breakpoint_operator

    # integer
    - match: '\d+\b'
      scope: constant.numeric.integer.sewl
      set: breakpoint_operator

  # a breakpoint comparator
  breakpoint_operator:

    # comparator
    - match: '(<=|<)'
      scope: keyword.operator.logical.sewl
      set: breakpoint

  # a parameter name
  parameter_name:

    # parameter name
    - match: '{{parameter}}\b'
      scope: entity.other.attribute-name.sewl
      set: parameter_value

    # unrecognised character
    - match: '\S+\b'
      scope: invalid.illegal.sewl
      set: ignore

  # a value for a parameter
  parameter_value:

    # unquoted string literal
    - match: '([^\s{$\d"]\S*|\d+\S+)\b'
      scope: string.unquoted.sewl
      set: parameter_name

    # start of expression
    - match: '{'
      set: [parameter_name, expression]

    # variable
    - match: '(\$)({{name}})\b'
      captures:
        1: variable.other.sewl punctuation.definition.variable.sewl
        2: variable.other.sewl
      set: parameter_name

    # decimal
    - match: '{{value_decimal}}'
      scope: constant.numeric.float.sewl
      set: parameter_name

    # integer
    - match: '{{value_integer}}'
      scope: constant.numeric.integer.sewl
      set: parameter_name

    # quoted string
    - match: '"'
      set: [parameter_name, quoted_string]

  # a variable name
  name:

    # variable name
    - match: '{{name}}\b'
      scope: variable.other.sewl
      pop: true

    # unrecognised character
    - match: '\S+\b'
      scope: invalid.illegal.sewl
      set: ignore

  # a value or literal
  value_or_literal:

    # unquoted string literal
    - match: '([^\s{$\d"]\S*|\d+\S+)\b'
      scope: string.unquoted.sewl
      pop: true

    - include: value

  # a value
  value:

    # start of expression
    - match: '{'
      set: expression

    # variable
    - match: '(\$)({{name}})\b'
      captures:
        1: variable.other.sewl punctuation.definition.variable.sewl
        2: variable.other.sewl
      pop: true

    # decimal
    - match: '{{value_decimal}}'
      scope: constant.numeric.float.sewl
      pop: true

    # integer
    - match: '{{value_integer}}'
      scope: constant.numeric.integer.sewl
      pop: true

    # quoted string
    - match: '"'
      set: quoted_string

    # unrecognised character
    - match: '\S+\b'
      scope: invalid.illegal.sewl
      set: ignore

  # a quoted string
  quoted_string:

    - meta_scope: string.quoted.double.sewl

    # end of quoted string
    - match: '"'
      pop: true

    # escaped quote mark
    - match: '\\"'
      scope: constant.character.escape.sewl

  # top-level expression
  expression:

    # end of expression
    - match: '}'
      pop: true

    # start of nested expression
    - match: '\('
      set: [after_expression, subexpression]

    # variable
    - match: '(\$)({{name}})\b'
      captures:
        1: variable.other.sewl punctuation.definition.variable.sewl
        2: variable.other.sewl
      set: after_expression

    # decimal
    - match: '{{value_decimal}}'
      scope: constant.numeric.float.sewl
      set: after_expression

    # integer
    - match: '{{value_integer}}'
      scope: constant.numeric.integer.sewl
      set: after_expression

    # quoted string
    - match: '"'
      set: [after_expression, quoted_string]

    - include: expression_common

  # subexpression (in round brackets)
  subexpression:

    # unexpected end of expression
    - match: '}'
      set: error

    # start of nested expression
    - match: '\('
      set: [after_subexpression, subexpression]

    # variable
    - match: '(\$)({{name}})\b'
      captures:
        1: variable.other.sewl punctuation.definition.variable.sewl
        2: variable.other.sewl
      set: after_subexpression

    # decimal
    - match: '{{value_decimal}}'
      scope: constant.numeric.float.sewl
      set: after_subexpression

    # integer
    - match: '{{value_integer}}'
      scope: constant.numeric.integer.sewl
      set: after_subexpression

    # quoted string
    - match: '"'
      set: [after_subexpression, quoted_string]

    - include: expression_common

  # index expression (in square brackets)
  index_expression:

    # unexpected end of expression
    - match: '(}|\))'
      set: error

    # start of nested expression
    - match: '\('
      set: [after_index_expression, subexpression]

    # variable
    - match: '(\$)({{name}})\b'
      captures:
        1: variable.other.sewl punctuation.definition.variable.sewl
        2: variable.other.sewl
      set: after_index_expression

    # decimal
    - match: '{{value_decimal}}'
      scope: constant.numeric.float.sewl
      set: after_index_expression

    # integer
    - match: '{{value_integer}}'
      scope: constant.numeric.integer.sewl
      set: after_index_expression

    # quoted string
    - match: '"'
      set: [after_index_expression, quoted_string]

    - include: expression_common

  # common patterns for all expression scopes
  expression_common:

    # skip spaces
    - match: '\s+'

    # arithmetic operator
    - match: '{{unary_operator_arithmetic}}'
      scope: keyword.operator.arithmetic.sewl

    # word operator
    - match: '{{unary_operator_word}}'
      scope: keyword.operator.word.sewl

    # unrecognised operator
    - match: '(?=.)'
      set: error

  # after a term in an expression
  after_expression:

    # end of expression
    - match: '}'
      pop: true

    # end of nested expression
    - match: '\)'
      pop: true

    # arithmetic operator
    - match: '{{binary_operator_arithmetic}}'
      scope: keyword.operator.arithmetic.sewl
      set: expression

    # logical operator
    - match: '{{binary_operator_logical}}'
      scope: keyword.operator.logical.sewl
      set: expression

    # word operator
    - match: '{{binary_operator_word}}'
      scope: keyword.operator.word.sewl
      set: expression

    # other operator
    - match: '{{binary_operator_other}}'
      scope: keyword.operator.sewl
      set: expression

    - include: after_expression_common

  # after a term in a subexpression
  after_subexpression:

    # end of nested expression
    - match: '\)'
      pop: true

    # arithmetic operator
    - match: '{{binary_operator_arithmetic}}'
      scope: keyword.operator.arithmetic.sewl
      set: subexpression

    # logical operator
    - match: '{{binary_operator_logical}}'
      scope: keyword.operator.logical.sewl
      set: subexpression

    # word operator
    - match: '{{binary_operator_word}}'
      scope: keyword.operator.word.sewl
      set: subexpression

    # other operator
    - match: '{{binary_operator_other}}'
      scope: keyword.operator.sewl
      set: subexpression

    - include: after_expression_common

  # after a term in an index expression
  after_index_expression:

    # end of index expression
    - match: ']'
      pop: true

    # arithmetic operator
    - match: '{{binary_operator_arithmetic}}'
      scope: keyword.operator.arithmetic.sewl
      set: index_expression

    # logical operator
    - match: '{{binary_operator_logical}}'
      scope: keyword.operator.logical.sewl
      set: index_expression

    # word operator
    - match: '{{binary_operator_word}}'
      scope: keyword.operator.word.sewl
      set: index_expression

    # other operator
    - match: '{{binary_operator_other}}'
      scope: keyword.operator.sewl
      set: index_expression

    - include: after_expression_common

  # common patterns for all 'after expression' scopes
  after_expression_common:

    # skip spaces
    - match: '\s+'

    # start of index expression
    - match: '\['
      push: index_expression

    # unrecognised operator
    - match: '(?=.)'
      set: error
